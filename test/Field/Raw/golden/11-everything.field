ext e;
ext ?e;
ext #e;

let ?a = T;
let ?b = F;
let #v = {T, F, T};
let ?or = ?a or ?b;
let ?ore = ?a or ?e;
let ?and = ?or or ?b;
let ?xor = ?and or ?or;
let f = 0;
let g = 1;
let h = 2;
let ?feq = g == f;
let ?feqe = e == f;
let ?fle = h <= f;
let ?flt = f < g;
let ?fge = g >= h;
let ?fgt = h > f;
let add = f + g;
let sub = g - h;
let mul = h * f;
let div = f / g;
let ?bat = #v[f];
let ?bate = #e[f];
let ?not = not ?a;
let ?neq0 = neq0 f;
let neg' = neg g;
let inv' = inv h;
let #unpack = unpack h;
let ?let = T;
assert T;
for j = 0 to 2 do end;
let ?if = if T then T else T;
let asf = 1 : field;
let ?as = T : bool;
let #as = { T } : vector;
