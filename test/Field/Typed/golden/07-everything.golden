ext eb_0 : bool;
ext ef_1 : field;
ext ev_2 : vector;
let a_3 : bool = T;
let b_4 : bool = F;
let or'_5 : bool = (a_3 : bool) or (b_4 : bool);
let or''_6 : bool = (a_3 : bool) or (eb_0 : bool);
let and'_7 : bool = (or''_6 : bool) and (b_4 : bool);
let xor'_8 : bool = (and'_7 : bool) xor (or''_6 : bool);
let f_9 : field = 0;
let g_10 : field = 1;
let h_11 : field = 2;
let feq_12 : bool = (g_10 : field) == (f_9 : field);
let fe'_13 : bool = (ef_1 : field) == (f_9 : field);
let fle_14 : bool = (h_11 : field) <= (f_9 : field);
let flt_15 : bool = (f_9 : field) < (g_10 : field);
let fge_16 : bool = (g_10 : field) >= (h_11 : field);
let fgt_17 : bool = (h_11 : field) > (f_9 : field);
let add_18 : field = (f_9 : field) + (g_10 : field);
let ad'_19 : field = (f_9 : field) + (ef_1 : field);
let sub_20 : field = (g_10 : field) - (h_11 : field);
let mul_21 : field = (h_11 : field) * (f_9 : field);
let div_22 : field = (f_9 : field) / (g_10 : field);
let v_23 : vector = {T,F,T};
let bat_24 : bool = (v_23 : vector)[(f_9 : field)];
let ba'_25 : bool = (ev_2 : vector)[(f_9 : field)];
let not'_26 : bool = not (a_3 : bool);
let neq0'_27 : bool = neq0 (f_9 : field);
let neg'_28 : field = neg (g_10 : field);
let inv'_29 : field = inv (h_11 : field);
let unp_30 : vector = unpack (h_11 : field);
let let'_31 : bool = T;
assert T;
let j_32 : field = 0;
let j_33 : field = 1;
let j_34 : field = 2;
let if'_35 : bool = if T then T else T;
let asf_36 : field = 1;
let asb_37 : bool = T;
let asv_38 : vector = {T};
