ext ?eb_0;
ext $ef_1;
ext @ev_2;
let ?a_3 = T;
let ?b_4 = F;
let ?or'_5 = (?a_3) or (?b_4);
let ?or''_6 = (?a_3) or (?eb_0);
let ?and'_7 = (?or''_6) and (?b_4);
let ?xor'_8 = (?and'_7) xor (?or''_6);
let $f_9 = 0;
let $g_10 = 1;
let $h_11 = 2;
let ?feq_12 = ($g_10) == ($f_9);
let ?fe'_13 = ($ef_1) == ($f_9);
let ?fle_14 = ($h_11) <= ($f_9);
let ?flt_15 = ($f_9) < ($g_10);
let ?fge_16 = ($g_10) >= ($h_11);
let ?fgt_17 = ($h_11) > ($f_9);
let $add_18 = ($f_9) + ($g_10);
let $ad'_19 = ($f_9) + ($ef_1);
let $sub_20 = ($g_10) - ($h_11);
let $mul_21 = ($h_11) * ($f_9);
let $div_22 = ($f_9) / ($g_10);
let @v_23 = {T,F,T};
let ?bat_24 = (@v_23)[($f_9)];
let ?ba'_25 = (@ev_2)[($f_9)];
let ?not'_26 = not (?a_3);
let ?neq0'_27 = neq0 ($f_9);
let $neg'_28 = neg ($g_10);
let $inv'_29 = inv ($h_11);
let @unp_30 = unpack ($h_11);
let ?let'_31 = T;
assert T;
let $j_32 = 0;
let $j_33 = 1;
let $j_34 = 2;
let ?if'_35 = if T then T else T;
let $asf_36 = 1;
let ?asb_37 = T;
let @asv_38 = {T};
